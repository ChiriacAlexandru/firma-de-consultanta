#include <stdio.h>

// Interclasare a două jumătăți sortate
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++) L[i] = arr[l + i];
    for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2)
        arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

// Funcția recursivă de sortare
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;

        mergeSort(arr, l, m);     // Sortează jumătatea stângă
        mergeSort(arr, m + 1, r); // Sortează jumătatea dreaptă
        merge(arr, l, m, r);      // Interclasează
    }
}

// Afișează vectorul
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Exemplu de utilizare
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Vectorul inițial:\n");
    printArray(arr, size);

    mergeSort(arr, 0, size - 1);

    printf("Vectorul sortat cu Merge Sort:\n");
    printArray(arr, size);

    return 0;
}
